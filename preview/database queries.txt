-- CREATE SECTION

CREATE TABLE bookdelight.Users (
    id_user SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    username VARCHAR(100) NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    birthday DATE,
	verify BOOLEAN DEFAULT FALSE,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Security (
    id_security SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    password VARCHAR(255) NOT NULL,
    update_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.User_Photos (
    id_photo SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    photo_path VARCHAR(255) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Book (
    id_book SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE SET NULL,
    title VARCHAR(255) NOT NULL,
    publisher VARCHAR(255),
    publication_date DATE,
    isbn BIGINT,
    book_length INT,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Review (
    id_review SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    description TEXT NOT NULL, 
    rating INT CHECK (rating >= 1 AND rating <= 10) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT unique_user_review UNIQUE (id_book, id_user)
);


CREATE TABLE bookdelight.Reply (
    id_reply SERIAL PRIMARY KEY,
	id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_review INT REFERENCES bookdelight.Review(id_review) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    description TEXT NOT NULL, 
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Review_Votes (
    id_vote SERIAL PRIMARY KEY,
    id_review INT REFERENCES bookdelight.Review(id_review) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    vote_type VARCHAR(10) CHECK (vote_type IN ('upvote', 'downvote')),
	creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (id_review, id_user)
);


CREATE TABLE bookdelight.Reply_Votes (
    id_vote SERIAL PRIMARY KEY,
    id_reply INT REFERENCES bookdelight.Reply(id_reply) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    vote_type VARCHAR(10) CHECK (vote_type IN ('upvote', 'downvote')),
	creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (id_reply, id_user)
);


CREATE TABLE bookdelight.Genre (
    id_genre SERIAL PRIMARY KEY,
    genre_name VARCHAR(100) NOT NULL UNIQUE
);


CREATE TABLE bookdelight.Book_Genre (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_genre INT REFERENCES bookdelight.Genre(id_genre) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_genre)
);


CREATE TABLE bookdelight.Book_Description (
    id_book_description SERIAL PRIMARY KEY,
	id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    short_description TEXT,
    long_description TEXT
);


CREATE TABLE bookdelight.Author (
    id_author SERIAL PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);


CREATE TABLE bookdelight.Book_Author (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_author INT REFERENCES bookdelight.Author(id_author) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_author)
);


CREATE TABLE bookdelight.User_Genres (
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    id_genre INT REFERENCES bookdelight.Genre(id_genre) ON DELETE CASCADE
);


CREATE TABLE bookdelight.User_Authors (
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    id_author INT REFERENCES bookdelight.Author(id_author) ON DELETE CASCADE
);


CREATE TABLE bookdelight.Sessions (
    id_sessions SERIAL PRIMARY KEY,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    jwt_token TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP
);


CREATE TABLE bookdelight.Book_Photos (
    id_photo SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    photo_path VARCHAR(255) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Currently_Reading (
    id_current SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
	current_page INT DEFAULT 0,
	update_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	start_reading_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Wish_Read (
    id_wish SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Favorite_Books (
    id_favorite SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Read_Books (
    id_read SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Collected_User_Data (
    id_collected_user_data SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    browser_name VARCHAR(50) NOT NULL,
    browser_version VARCHAR(50),
    os_name VARCHAR(50) NOT NULL,
    os_version VARCHAR(50),
    device_type VARCHAR(50),
    device_model VARCHAR(50),
    device_vendor VARCHAR(50),
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);






-- TRIGGERS SECTION


CREATE OR REPLACE FUNCTION update_currently_reading_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_currently_reading_date_trigger
BEFORE UPDATE ON bookdelight.Currently_Reading
FOR EACH ROW
EXECUTE FUNCTION update_currently_reading_date();




CREATE OR REPLACE FUNCTION update_security_date()
RETURNS TRIGGER AS $$
BEGIN
    NEW.update_date = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_security_date_trigger
BEFORE UPDATE ON bookdelight.Security
FOR EACH ROW
EXECUTE FUNCTION update_security_date();



-- EXTENSION SECTION


CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
