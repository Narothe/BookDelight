-- CREATE SECTION

CREATE TABLE bookdelight.Users (
    id_user SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    username VARCHAR(100) NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    birth_day SMALLINT NOT NULL CHECK (birth_day BETWEEN 1 AND 31),
    birth_month SMALLINT NOT NULL CHECK (birth_month BETWEEN 1 AND 12),
    birth_year SMALLINT NOT NULL CHECK (birth_year BETWEEN 1800 AND EXTRACT(YEAR FROM CURRENT_DATE)),
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Book (
    id_book SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE SET NULL,
    title VARCHAR(255) NOT NULL,
    publisher VARCHAR(255),
    publication_date DATE,
    isbn BIGINT CHECK (length(isbn::text) IN (10, 13)),
    book_length INT,
    photo_path VARCHAR(255),
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Review (
    id_review SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE, -- Recenzowana książka
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE, -- Użytkownik, który dodał recenzję
    description TEXT NOT NULL, -- Opis recenzji
    rating INT CHECK (rating >= 1 AND rating <= 10) NOT NULL, -- Ocena w skali 1-10
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Review_Votes (
    id_review INT REFERENCES bookdelight.Review(id_review) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    vote_type VARCHAR(10) CHECK (vote_type IN ('up', 'down')),
    PRIMARY KEY (id_review, id_user)
);


CREATE TABLE bookdelight.Genre (
    id_genre SERIAL PRIMARY KEY,
    genre_name VARCHAR(100) NOT NULL UNIQUE CHECK (genre_name IN ('novels', 'scifi', 'fantasy', 'crime_stories', 'thrillers', 'romantic', 'historical', 'biographies', 'non_fiction', 'comics', 'classics_of_literature'))
);


CREATE TABLE bookdelight.Book_Genre (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_genre INT REFERENCES bookdelight.Genre(id_genre) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_genre)
);


CREATE TABLE bookdelight.Book_Description (
    id_book_description SERIAL PRIMARY KEY,
	id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    short_description TEXT,
    long_description TEXT
);


CREATE TABLE bookdelight.Author (
    id_author SERIAL PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);


CREATE TABLE bookdelight.Book_Author (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_author INT REFERENCES bookdelight.Author(id_author) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_author)
);

CREATE TABLE bookdelight.Preferences (
    id_preferences SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    new_releases BOOLEAN NOT NULL DEFAULT TRUE,
    average_rate DECIMAL(3,2) DEFAULT 0,
    popularity_rate INT DEFAULT 0
);

CREATE TABLE bookdelight.Sessions (
    id_sessions SERIAL PRIMARY KEY,
    user_id INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    jwt_token TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP
);



-- QUERIES SECTION


-- SHOW ALL INFO ABOUT BOOK
SELECT b.id_book, 
	b.title, b.publisher, b.publication_date, b.isbn, b.book_length, 
	bd.short_description, bd.long_description, 
	ARRAY_AGG(a.author_name) AS authors
FROM bookdelight.Book b
JOIN bookdelight.Book_Description bd ON b.id_book = bd.id_book
JOIN bookdelight.Book_Author ba ON b.id_book = ba.id_book
JOIN bookdelight.Author a ON ba.id_author = a.id_author
WHERE b.id_book = 30
GROUP BY 
	b.id_book, 
	b.title, 
	b.publisher, 
	b.publication_date, 
	b.isbn, 
	b.book_length, 
	bd.short_description, 
	bd.long_description;