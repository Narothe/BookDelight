-- CREATE SECTION

CREATE TABLE bookdelight.Users (
    id_user SERIAL PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    username VARCHAR(100) NOT NULL UNIQUE,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    birth_day SMALLINT NOT NULL CHECK (birth_day BETWEEN 1 AND 31),
    birth_month SMALLINT NOT NULL CHECK (birth_month BETWEEN 1 AND 12),
    birth_year SMALLINT NOT NULL CHECK (birth_year BETWEEN 1800 AND EXTRACT(YEAR FROM CURRENT_DATE)),
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Book (
    id_book SERIAL PRIMARY KEY,
	id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE SET NULL,
    title VARCHAR(255) NOT NULL,
    publisher VARCHAR(255),
    publication_date DATE,
    isbn BIGINT CHECK (length(isbn::text) IN (10, 13)),
    book_length INT,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE bookdelight.Review (
    id_review SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    description TEXT NOT NULL, 
    rating INT CHECK (rating >= 1 AND rating <= 10) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT unique_user_review UNIQUE (id_book, id_user)
);


CREATE TABLE bookdelight.Review_Votes (
    id_review_vote SERIAL PRIMARY KEY,
    id_review INT REFERENCES bookdelight.Review(id_review) ON DELETE CASCADE,
    id_user INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    vote_type VARCHAR(10) CHECK (vote_type IN ('upvote', 'downvote')),
	creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (id_review, id_user)
);


CREATE TABLE bookdelight.Genre (
    id_genre SERIAL PRIMARY KEY,
    genre_name VARCHAR(100) NOT NULL UNIQUE CHECK (genre_name IN ('novels', 'scifi', 'fantasy', 'crime_stories', 'thrillers', 'romantic', 'historical', 'biographies', 'non_fiction', 'comics', 'classics_of_literature'))
);


CREATE TABLE bookdelight.Book_Genre (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_genre INT REFERENCES bookdelight.Genre(id_genre) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_genre)
);


CREATE TABLE bookdelight.Book_Description (
    id_book_description SERIAL PRIMARY KEY,
	id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    short_description TEXT,
    long_description TEXT
);


CREATE TABLE bookdelight.Author (
    id_author SERIAL PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);


CREATE TABLE bookdelight.Book_Author (
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    id_author INT REFERENCES bookdelight.Author(id_author) ON DELETE CASCADE,
    PRIMARY KEY (id_book, id_author)
);

CREATE TABLE bookdelight.Preferences (
    id_preferences SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    new_releases BOOLEAN NOT NULL DEFAULT TRUE,
    average_rate DECIMAL(3,2) DEFAULT 0,
    popularity_rate INT DEFAULT 0
);

CREATE TABLE bookdelight.Sessions (
    id_sessions SERIAL PRIMARY KEY,
    user_id INT REFERENCES bookdelight.Users(id_user) ON DELETE CASCADE,
    jwt_token TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP
);

CREATE TABLE bookdelight.Book_Photos (
    id_photo SERIAL PRIMARY KEY,
    id_book INT REFERENCES bookdelight.Book(id_book) ON DELETE CASCADE,
    photo_path VARCHAR(255) NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- QUERIES SECTION


-- SHOW ALL INFO ABOUT BOOK
SELECT b.id_book,
               b.title,
               b.publisher,
               b.publication_date,
               b.isbn,
               b.book_length,
               bd.short_description,
               bd.long_description,
			   ROUND(AVG(r.rating), 2) AS rating, 
			   COUNT(DISTINCT r.id_review) AS review_count,
               ARRAY_AGG(a.author_name) AS authors
        FROM bookdelight.Book b
                 JOIN bookdelight.Book_Description bd ON b.id_book = bd.id_book
                 JOIN bookdelight.Book_Author ba ON b.id_book = ba.id_book
				 LEFT JOIN bookdelight.review r ON b.id_book = r.id_book
                 JOIN bookdelight.Author a ON ba.id_author = a.id_author
		WHERE b.id_book = 30
        GROUP BY b.id_book,
                 bd.short_description,
                 bd.long_description;


-- SHOW ALL INFO ABOUT BOOK REVIEW
SELECT 
    r.id_book,
    r.id_user,
    b.title,
    authors_array.authors,
    r.description, 
    r.rating, 
    COALESCE(vote_summary.upvotes, 0) AS upvotes,
    COALESCE(vote_summary.downvotes, 0) AS downvotes 
FROM bookdelight.review r
JOIN bookdelight.book b ON r.id_book = b.id_book
JOIN LATERAL (
    SELECT ARRAY_AGG(a.author_name) AS authors
    FROM bookdelight.book_author ba
    JOIN bookdelight.author a ON ba.id_author = a.id_author
    WHERE ba.id_book = r.id_book
) authors_array ON true
LEFT JOIN LATERAL (
    SELECT 
        COUNT(CASE WHEN rv.vote_type = 'upvote' THEN 1 END) AS upvotes,
        COUNT(CASE WHEN rv.vote_type = 'downvote' THEN 1 END) AS downvotes
    FROM bookdelight.review_votes rv
    WHERE rv.id_review = r.id_review
) vote_summary ON true
WHERE r.id_review = 8 AND b.id_book = 30
GROUP BY r.id_book, 
	r.id_user, 
	b.title, 
	r.description, 
	r.rating, 
	authors_array.authors, 
	vote_summary.upvotes, 
	vote_summary.downvotes;
